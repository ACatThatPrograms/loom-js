import BN from 'bn.js'
import { Client } from './client'
import { Contract } from './contract'
import { Address } from './address'
import {
  TransferGatewayWithdrawERC721Request,
  TransferGatewayWithdrawalReceiptRequest,
  TransferGatewayWithdrawalReceiptResponse,
  TransferGatewayWithdrawalReceipt
} from './proto/loom_pb'
import { marshalBigUIntPB, unmarshalBigUIntPB } from './big-uint'

export interface ITransferGatewayReceipt {
  tokenOwner: Address
  // Mainnet address of token contract
  tokenContract: Address
  transferGatewayKind: Number
  // ERC721 token ID, or amount of ERC20/ETH
  value: BN
  withdrawalNonce: Number
  // Signature generated by the Oracle that confirmed the withdrawal
  oracleSignature: Uint8Array
}

export class TransferGateway {
  private _transferGatewayContract!: Contract

  static async createAsync(client: Client, callerAddr: Address): Promise<TransferGateway> {
    const contractAddr = await client.getContractAddressAsync('transfergateway')
    if (!contractAddr) {
      throw Error('Failed to resolve contract address for TransferGateway')
    }

    const contract = new Contract({ contractAddr, callerAddr, client })
    return new TransferGateway(contract)
  }

  constructor(contract: Contract) {
    this._transferGatewayContract = contract
  }

  async withdrawERC721Async(tokenId: BN, tokenContract: Address): Promise<void> {
    const tgWithdrawERC721Req = new TransferGatewayWithdrawERC721Request()
    tgWithdrawERC721Req.setTokenId(marshalBigUIntPB(tokenId))
    tgWithdrawERC721Req.setTokenContract(tokenContract.MarshalPB())

    return this._transferGatewayContract.callAsync<void>('WithdrawERC721', tgWithdrawERC721Req)
  }

  async withdrawalReceiptAsync(owner: Address): Promise<ITransferGatewayReceipt> {
    const tgWithdrawReceiptReq = new TransferGatewayWithdrawalReceiptRequest()
    tgWithdrawReceiptReq.setOwner(owner.MarshalPB())

    const result = await this._transferGatewayContract.staticCallAsync(
      'WithdrawalReceipt',
      tgWithdrawReceiptReq,
      new TransferGatewayWithdrawalReceiptResponse()
    )

    const tgReceipt = result.getReceipt() as TransferGatewayWithdrawalReceipt

    return {
      tokenOwner: Address.UmarshalPB(tgReceipt.getTokenOwner()!),
      tokenContract: Address.UmarshalPB(tgReceipt.getTokenOwner()!),
      transferGatewayKind: tgReceipt.getTokenKind(),
      value: unmarshalBigUIntPB(tgReceipt.getValue()!),
      withdrawalNonce: tgReceipt.getWithdrawalNonce(),
      oracleSignature: tgReceipt.getOracleSignature_asU8()
    } as ITransferGatewayReceipt
  }
}
